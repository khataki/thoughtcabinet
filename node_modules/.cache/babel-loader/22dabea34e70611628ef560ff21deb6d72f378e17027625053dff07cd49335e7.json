{"ast":null,"code":"var _jsxFileName = \"/Users/evilillidan/Desktop/dev/thought-cabinet/src/components/ThoughtTree.js\";\n// src/components/ThoughtTree.js\nimport React from 'react';\nimport ThoughtNode from './ThoughtNode';\nimport './ThoughtTree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThoughtTree = ({\n  thoughts,\n  connections,\n  selectThought\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thought-tree\",\n    children: [thoughts.map(thought => /*#__PURE__*/_jsxDEV(ThoughtNode, {\n      thought: thought,\n      onClick: selectThought\n    }, thought.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"connection-lines\",\n      children: connections.map((connection, index) => {\n        const fromNode = document.getElementById(`thought-node-${connection.from}`);\n        const toNode = document.getElementById(`thought-node-${connection.to}`);\n        if (fromNode && toNode) {\n          const fromRect = fromNode.getBoundingClientRect();\n          const toRect = toNode.getBoundingClientRect();\n          const fromX = fromRect.left + fromRect.width / 2;\n          const fromY = fromRect.top + fromRect.height / 2;\n          const toX = toRect.left + toRect.width / 2;\n          const toY = toRect.top + toRect.height / 2;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromX,\n            y1: fromY,\n            x2: toX,\n            y2: toY,\n            className: \"connection-line\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = ThoughtTree;\nexport default ThoughtTree;\nvar _c;\n$RefreshReg$(_c, \"ThoughtTree\");","map":{"version":3,"names":["React","ThoughtNode","jsxDEV","_jsxDEV","ThoughtTree","thoughts","connections","selectThought","className","children","map","thought","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","connection","index","fromNode","document","getElementById","from","toNode","to","fromRect","getBoundingClientRect","toRect","fromX","left","width","fromY","top","height","toX","toY","x1","y1","x2","y2","_c","$RefreshReg$"],"sources":["/Users/evilillidan/Desktop/dev/thought-cabinet/src/components/ThoughtTree.js"],"sourcesContent":["// src/components/ThoughtTree.js\nimport React from 'react';\nimport ThoughtNode from './ThoughtNode';\nimport './ThoughtTree.css';\n\nconst ThoughtTree = ({ thoughts, connections, selectThought }) => {\n  return (\n    <div className=\"thought-tree\">\n      {thoughts.map(thought => (\n        <ThoughtNode key={thought.id} thought={thought} onClick={selectThought} />\n      ))}\n      <svg className=\"connection-lines\">\n        {connections.map((connection, index) => {\n          const fromNode = document.getElementById(`thought-node-${connection.from}`);\n          const toNode = document.getElementById(`thought-node-${connection.to}`);\n          if (fromNode && toNode) {\n            const fromRect = fromNode.getBoundingClientRect();\n            const toRect = toNode.getBoundingClientRect();\n            const fromX = fromRect.left + fromRect.width / 2;\n            const fromY = fromRect.top + fromRect.height / 2;\n            const toX = toRect.left + toRect.width / 2;\n            const toY = toRect.top + toRect.height / 2;\n            return (\n              <line\n                key={index}\n                x1={fromX}\n                y1={fromY}\n                x2={toX}\n                y2={toY}\n                className=\"connection-line\"\n              />\n            );\n          }\n          return null;\n        })}\n      </svg>\n    </div>\n  );\n};\n\nexport default ThoughtTree;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAc,CAAC,KAAK;EAChE,oBACEJ,OAAA;IAAKK,SAAS,EAAC,cAAc;IAAAC,QAAA,GAC1BJ,QAAQ,CAACK,GAAG,CAACC,OAAO,iBACnBR,OAAA,CAACF,WAAW;MAAkBU,OAAO,EAAEA,OAAQ;MAACC,OAAO,EAAEL;IAAc,GAArDI,OAAO,CAACE,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA6C,CAC1E,CAAC,eACFd,OAAA;MAAKK,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BH,WAAW,CAACI,GAAG,CAAC,CAACQ,UAAU,EAAEC,KAAK,KAAK;QACtC,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAAC,gBAAgBJ,UAAU,CAACK,IAAI,EAAE,CAAC;QAC3E,MAAMC,MAAM,GAAGH,QAAQ,CAACC,cAAc,CAAC,gBAAgBJ,UAAU,CAACO,EAAE,EAAE,CAAC;QACvE,IAAIL,QAAQ,IAAII,MAAM,EAAE;UACtB,MAAME,QAAQ,GAAGN,QAAQ,CAACO,qBAAqB,CAAC,CAAC;UACjD,MAAMC,MAAM,GAAGJ,MAAM,CAACG,qBAAqB,CAAC,CAAC;UAC7C,MAAME,KAAK,GAAGH,QAAQ,CAACI,IAAI,GAAGJ,QAAQ,CAACK,KAAK,GAAG,CAAC;UAChD,MAAMC,KAAK,GAAGN,QAAQ,CAACO,GAAG,GAAGP,QAAQ,CAACQ,MAAM,GAAG,CAAC;UAChD,MAAMC,GAAG,GAAGP,MAAM,CAACE,IAAI,GAAGF,MAAM,CAACG,KAAK,GAAG,CAAC;UAC1C,MAAMK,GAAG,GAAGR,MAAM,CAACK,GAAG,GAAGL,MAAM,CAACM,MAAM,GAAG,CAAC;UAC1C,oBACE/B,OAAA;YAEEkC,EAAE,EAAER,KAAM;YACVS,EAAE,EAAEN,KAAM;YACVO,EAAE,EAAEJ,GAAI;YACRK,EAAE,EAAEJ,GAAI;YACR5B,SAAS,EAAC;UAAiB,GALtBW,KAAK;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMX,CAAC;QAEN;QACA,OAAO,IAAI;MACb,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACwB,EAAA,GAjCIrC,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}