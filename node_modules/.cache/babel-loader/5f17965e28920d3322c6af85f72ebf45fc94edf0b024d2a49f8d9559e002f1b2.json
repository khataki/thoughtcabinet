{"ast":null,"code":"var _jsxFileName = \"/Users/evilillidan/Desktop/dev/thought-cabinet/src/components/ThoughtEditor.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/ThoughtEditor.js\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport './ThoughtEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThoughtEditor = ({\n  thoughts,\n  setThoughts,\n  connections\n}) => {\n  _s();\n  const [, drop] = useDrop(() => ({\n    accept: 'thought',\n    drop: (item, monitor) => {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveThought(item.id, left, top);\n    }\n  }));\n  const moveThought = (id, left, top) => {\n    setThoughts(thoughts.map(thought => thought.id === id ? {\n      ...thought,\n      left,\n      top\n    } : thought));\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: drop,\n      className: \"thought-editor\",\n      children: [thoughts.map(thought => /*#__PURE__*/_jsxDEV(DraggableThought, {\n        thought: thought\n      }, thought.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connection-lines\",\n        children: connections.map((connection, index) => {\n          const fromThought = thoughts.find(thought => thought.id === connection.from);\n          const toThought = thoughts.find(thought => thought.id === connection.to);\n          if (!fromThought || !toThought) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromThought.left + 50,\n            y1: fromThought.top + 50,\n            x2: toThought.left + 50,\n            y2: toThought.top + 50,\n            stroke: \"white\",\n            strokeWidth: \"2\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(ThoughtEditor, \"hdmCamxlwL9WeSdzgzIVyaE48AI=\", false, function () {\n  return [useDrop];\n});\n_c = ThoughtEditor;\nconst DraggableThought = ({\n  thought\n}) => {\n  _s2();\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: 'thought',\n    item: {\n      id: thought.id,\n      left: thought.left,\n      top: thought.top\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drag,\n    className: \"draggable-thought\",\n    style: {\n      left: thought.left,\n      top: thought.top,\n      opacity: isDragging ? 0.5 : 1\n    },\n    children: thought.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s2(DraggableThought, \"wuumsFp4qAni9XRJfRhQAZjuD/k=\", false, function () {\n  return [useDrag];\n});\n_c2 = DraggableThought;\nexport default ThoughtEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThoughtEditor\");\n$RefreshReg$(_c2, \"DraggableThought\");","map":{"version":3,"names":["React","useDrag","useDrop","HTML5Backend","DndProvider","jsxDEV","_jsxDEV","ThoughtEditor","thoughts","setThoughts","connections","_s","drop","accept","item","monitor","delta","getDifferenceFromInitialOffset","left","Math","round","x","top","y","moveThought","id","map","thought","backend","children","ref","className","DraggableThought","fileName","_jsxFileName","lineNumber","columnNumber","connection","index","fromThought","find","from","toThought","to","x1","y1","x2","y2","stroke","strokeWidth","_c","_s2","isDragging","drag","type","collect","style","opacity","title","_c2","$RefreshReg$"],"sources":["/Users/evilillidan/Desktop/dev/thought-cabinet/src/components/ThoughtEditor.js"],"sourcesContent":["// src/components/ThoughtEditor.js\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport './ThoughtEditor.css';\n\nconst ThoughtEditor = ({ thoughts, setThoughts, connections }) => {\n  const [, drop] = useDrop(() => ({\n    accept: 'thought',\n    drop: (item, monitor) => {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveThought(item.id, left, top);\n    },\n  }));\n\n  const moveThought = (id, left, top) => {\n    setThoughts(thoughts.map(thought => (thought.id === id ? { ...thought, left, top } : thought)));\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div ref={drop} className=\"thought-editor\">\n        {thoughts.map(thought => (\n          <DraggableThought key={thought.id} thought={thought} />\n        ))}\n        <svg className=\"connection-lines\">\n          {connections.map((connection, index) => {\n            const fromThought = thoughts.find(thought => thought.id === connection.from);\n            const toThought = thoughts.find(thought => thought.id === connection.to);\n            if (!fromThought || !toThought) return null;\n\n            return (\n              <line\n                key={index}\n                x1={fromThought.left + 50}\n                y1={fromThought.top + 50}\n                x2={toThought.left + 50}\n                y2={toThought.top + 50}\n                stroke=\"white\"\n                strokeWidth=\"2\"\n              />\n            );\n          })}\n        </svg>\n      </div>\n    </DndProvider>\n  );\n};\n\nconst DraggableThought = ({ thought }) => {\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: 'thought',\n    item: { id: thought.id, left: thought.left, top: thought.top },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  }));\n\n  return (\n    <div\n      ref={drag}\n      className=\"draggable-thought\"\n      style={{ left: thought.left, top: thought.top, opacity: isDragging ? 0.5 : 1 }}\n    >\n      {thought.title}\n    </div>\n  );\n};\n\nexport default ThoughtEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}