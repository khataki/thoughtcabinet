{"ast":null,"code":"var _jsxFileName = \"/Users/evilillidan/Desktop/dev/thought-cabinet/src/components/ThoughtTree.js\";\n// src/components/ThoughtTree.js\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport './ThoughtTree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThoughtTree = ({\n  thoughts,\n  connections,\n  selectThought\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thought-tree\",\n    children: [thoughts.map((thought, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"thought-node\",\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      transition: {\n        delay: index * 0.2\n      },\n      onClick: () => selectThought(thought),\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: thought.image,\n        alt: thought.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)\n    }, thought.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)), connections.map((connection, index) => {\n      const fromThought = thoughts.find(thought => thought.id === connection.from);\n      const toThought = thoughts.find(thought => thought.id === connection.to);\n      if (!fromThought || !toThought) return null;\n      return /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connection-line\",\n        children: /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: fromThought.x,\n          y1: fromThought.y,\n          x2: toThought.x,\n          y2: toThought.y,\n          stroke: \"white\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = ThoughtTree;\nexport default ThoughtTree;\nvar _c;\n$RefreshReg$(_c, \"ThoughtTree\");","map":{"version":3,"names":["React","motion","jsxDEV","_jsxDEV","ThoughtTree","thoughts","connections","selectThought","className","children","map","thought","index","div","initial","opacity","animate","transition","delay","onClick","src","image","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","id","connection","fromThought","find","from","toThought","to","x1","x","y1","y","x2","y2","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/Users/evilillidan/Desktop/dev/thought-cabinet/src/components/ThoughtTree.js"],"sourcesContent":["// src/components/ThoughtTree.js\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport './ThoughtTree.css';\n\nconst ThoughtTree = ({ thoughts, connections, selectThought }) => {\n  return (\n    <div className=\"thought-tree\">\n      {thoughts.map((thought, index) => (\n        <motion.div\n          key={thought.id}\n          className=\"thought-node\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: index * 0.2 }}\n          onClick={() => selectThought(thought)}\n        >\n          <img src={thought.image} alt={thought.title} />\n        </motion.div>\n      ))}\n      {connections.map((connection, index) => {\n        const fromThought = thoughts.find(thought => thought.id === connection.from);\n        const toThought = thoughts.find(thought => thought.id === connection.to);\n\n        if (!fromThought || !toThought) return null;\n\n        return (\n          <svg key={index} className=\"connection-line\">\n            <line\n              x1={fromThought.x}\n              y1={fromThought.y}\n              x2={toThought.x}\n              y2={toThought.y}\n              stroke=\"white\"\n              strokeWidth=\"2\"\n            />\n          </svg>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ThoughtTree;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAc,CAAC,KAAK;EAChE,oBACEJ,OAAA;IAAKK,SAAS,EAAC,cAAc;IAAAC,QAAA,GAC1BJ,QAAQ,CAACK,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BT,OAAA,CAACF,MAAM,CAACY,GAAG;MAETL,SAAS,EAAC,cAAc;MACxBM,OAAO,EAAE;QAAEC,OAAO,EAAE;MAAE,CAAE;MACxBC,OAAO,EAAE;QAAED,OAAO,EAAE;MAAE,CAAE;MACxBE,UAAU,EAAE;QAAEC,KAAK,EAAEN,KAAK,GAAG;MAAI,CAAE;MACnCO,OAAO,EAAEA,CAAA,KAAMZ,aAAa,CAACI,OAAO,CAAE;MAAAF,QAAA,eAEtCN,OAAA;QAAKiB,GAAG,EAAET,OAAO,CAACU,KAAM;QAACC,GAAG,EAAEX,OAAO,CAACY;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GAP1ChB,OAAO,CAACiB,EAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQL,CACb,CAAC,EACDrB,WAAW,CAACI,GAAG,CAAC,CAACmB,UAAU,EAAEjB,KAAK,KAAK;MACtC,MAAMkB,WAAW,GAAGzB,QAAQ,CAAC0B,IAAI,CAACpB,OAAO,IAAIA,OAAO,CAACiB,EAAE,KAAKC,UAAU,CAACG,IAAI,CAAC;MAC5E,MAAMC,SAAS,GAAG5B,QAAQ,CAAC0B,IAAI,CAACpB,OAAO,IAAIA,OAAO,CAACiB,EAAE,KAAKC,UAAU,CAACK,EAAE,CAAC;MAExE,IAAI,CAACJ,WAAW,IAAI,CAACG,SAAS,EAAE,OAAO,IAAI;MAE3C,oBACE9B,OAAA;QAAiBK,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC1CN,OAAA;UACEgC,EAAE,EAAEL,WAAW,CAACM,CAAE;UAClBC,EAAE,EAAEP,WAAW,CAACQ,CAAE;UAClBC,EAAE,EAAEN,SAAS,CAACG,CAAE;UAChBI,EAAE,EAAEP,SAAS,CAACK,CAAE;UAChBG,MAAM,EAAC,OAAO;UACdC,WAAW,EAAC;QAAG;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB;MAAC,GARMf,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASV,CAAC;IAEV,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACgB,EAAA,GApCIvC,WAAW;AAsCjB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}